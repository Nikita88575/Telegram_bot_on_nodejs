import bot from '../app.js';
import { selectUser, checkUser, transferBank, paymentSys } from '../db/quick_commands.js';

async function bank(msg) {
    try {
        const thisBot = bot.getMe();
        if (msg.text == '/bank' || msg.text == '!bank' || 
            msg.text == `/bank@${thisBot.username}` || 
            msg.text == `!bank@${thisBot.username}`) {
        
            await checkUser(msg, new Date());
            const user = await selectUser(msg.from.id);
            
            const bank_balance = parseInt(user.bank) * 50000;
            const value = new Intl.NumberFormat('en-US').format(bank_balance);

            await bot.sendMessage(msg.chat.id,
                '–£ –±–∞–Ω–∫—É –º–æ–∂–Ω–∞ –æ–±–º—ñ–Ω—è—Ç–∏ –≥—Ä–æ—à—ñ –Ω–∞ –æ–±–ª—ñ–≥–∞—Ü—ñ—ó, —ñ –Ω–∞–≤–ø–∞–∫–∏.\n' + 
                '–¶—ñ–Ω–∞ –æ–¥–Ω—ñ—î—ó –æ–±–ª—ñ–≥–∞—Ü—ñ—ó: 50 000üíµ.\n\n' +
                `–£ –í–∞—Å ${user.bank} –æ–±–ª—ñ–Ω–≥—Ü—ñ—ó –Ω–∞ —Å—É–º—É ${value} üíµ.\n` +
                '–ö—É–ø—ñ–≤–ª—è: /bank +1 –∞–±–æ <code>!bank +1</code>\n' + 
                '–ü—Ä–æ–¥–∞–∂: /bank -1 –∞–±–æ <code>!bank -1</code>', 
                {reply_to_message_id: msg.message_id, parse_mode: 'HTML'});
        
        } else if (msg.text.startsWith('/bank') || msg.text.startsWith('!bank')) {

            const user = await selectUser(msg.from.id);
            const value = msg.text.split(' ')[1];
            const amount = parseInt(value.match(/\d+/));

            if (value.startsWith('+')) {
                const total = amount * 50000;

                if (parseInt(user.balance) >= total) {

                    await transferBank(msg.from.id, amount);
                    await paymentSys(msg.from.id, parseInt(-total));
                    
                    const obl = await selectUser(msg.from.id);
                    const formattedBank = new Intl.NumberFormat('en-US').format(parseInt(obl.bank) * 50000);
                    
                    await bot.sendMessage(msg.chat.id,
                        `–¢–∏ —É—Å–ø—ñ—à–Ω–æ –∫—É–ø–∏–≤ ${amount} –æ–±–ª—ñ–≥–∞—Ü—ñ–π ‚ùóÔ∏è\n–£ —Ç–µ–±–µ ${obl.bank} –æ–±–ª—ñ–≥–∞—Ü—ñ—ó –Ω–∞ —Å—É–º—É ${formattedBank}üíµ‚ùóÔ∏è`,
                        {reply_to_message_id: msg.message_id});

                } else {

                    const formattedBalance = new Intl.NumberFormat('en-US').format(user.balance);
                    await bot.sendMessage(msg.chat.id,
                        `–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤‚ùóÔ∏è\n–¢–≤—ñ–π –±–∞–ª–∞–Ω—Å: ${formattedBalance}üíµ‚ùóÔ∏è`,
                        {reply_to_message_id: msg.message_id});
                }

            } else if (value.startsWith('-')) {

                const total = amount * 50000;
                if (parseInt(user.bank) >= amount) {

                    await transferBank(msg.from.id, -amount);
                    await paymentSys(msg.from.id, total);

                    const obl = await selectUser(msg.from.id);
                    const formattedBank = new Intl.NumberFormat('en-US').format(parseInt(obl.bank) * 50000);
                    
                    await bot.sendMessage(msg.chat.id,
                        `–¢–∏ —É—Å–ø—ñ—à–Ω–æ –ø—Ä–æ–¥–∞–≤ ${amount} –æ–±–ª—ñ–≥–∞—Ü—ñ–π ‚ùóÔ∏è\n–£ —Ç–µ–±–µ ${obl.bank} –æ–±–ª—ñ–≥–∞—Ü—ñ—ó –Ω–∞ —Å—É–º—É ${formattedBank}üíµ‚ùóÔ∏è`,
                        {reply_to_message_id: msg.message_id});

                } else {

                    await bot.sendMessage(msg.chat.id,
                        `–£ —Ç–µ–±–µ –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –æ–±–ª—ñ–≥–∞—Ü—ñ–π‚ùóÔ∏è\n–ö—ñ–ª—å–∫—ñ—Å—Ç—å –æ–±–ª—ñ–≥–∞—Ü—ñ–π: ${user.bank}‚ùóÔ∏è`,
                        {reply_to_message_id: msg.message_id});
                }
            }
        }
    } catch (error) {
        console.log(`[${Date()}] ${error}`);
    }
};

export default bank;