import bot from '../app.js';
import { selectUser, checkUser } from '../db/quick_commands.js';
import { addDiceRecord } from '../db/history_dice_commands.js';

async function dice(msg) {
  try {
    await checkUser(msg, new Date());
    const user = await selectUser(msg.from.id);

    const chosenNumber = parseInt(msg.text.split(' ')[1]);
    const bet = parseFloat(msg.text.split(' ').slice(2).join(''));

    const x = user.status === 'premium' ? 2.9 : 2.5;

    if (isNaN(bet) || isNaN(chosenNumber) || bet <= 0 || 1 < chosenNumber > 6) {
      return await bot.sendMessage(
        msg.chat.id,
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏ —á–∏ —á–∏—Å–ª–∞‚ùóÔ∏è\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /dice <—á–∏—Å–ª–æ –≤—ñ–¥ 1 –¥–æ 6> <—Å—Ç–∞–≤–∫–∞>',
        { reply_to_message_id: msg.message_id }
      );
    } else if (user.balance < bet) {
      return await bot.sendMessage(
        msg.chat.id,
        `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞–≤–∫–∏‚ùóÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${new Intl.NumberFormat('en-US').format(user.balance)}üíµ‚ùóÔ∏è`,
        { reply_to_message_id: msg.message_id }
      );
    }

    const message = await bot.sendDice(msg.chat.id);
    const diceValue = message.dice.value;
    const now = new Date();
    await user.update({
      balance: (parseFloat(user.balance) - parseFloat(bet)).toFixed(2),
    });

    setTimeout(async () => {
      try {
        if (parseInt(diceValue) === chosenNumber) {
          const amount = (
            parseFloat(user.balance) + parseFloat(bet * x)
          ).toFixed(2);
          await user.update({ balance: amount });

          await addDiceRecord(
            msg.from.id,
            chosenNumber,
            bet,
            'Win',
            diceValue,
            x,
            (bet * x).toFixed(2),
            now
          );
          await bot.sendMessage(
            msg.chat.id,
            `–í–∏–ø–∞–ª–æ: ${diceValue}‚ùóÔ∏è\n` +
              `C—Ç–∞–≤–∫–∞: ${new Intl.NumberFormat('en-US').format(bet)} üíµ‚ùóÔ∏è\n` +
              `–í–∏ –≤–∏–≥—Ä–∞–ª–∏: ${new Intl.NumberFormat('en-US').format(bet * x)} üíµ‚ùóÔ∏è\n` +
              `–í–∞—à –±–∞–ª–∞–Ω—Å: ${new Intl.NumberFormat('en-US').format(user.balance)} üíµ‚ùóÔ∏è`,
            { reply_to_message_id: msg.message_id }
          );
        } else {
          await addDiceRecord(
            msg.from.id,
            chosenNumber,
            bet,
            'Lose',
            diceValue,
            x,
            bet,
            now
          );
          await bot.sendMessage(
            msg.chat.id,
            `–í–∏–ø–∞–ª–æ: ${diceValue}‚ùóÔ∏è\n` +
              `C—Ç–∞–≤–∫–∞: ${new Intl.NumberFormat('en-US').format(bet)} üíµ‚ùóÔ∏è\n` +
              `–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏‚ùóÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${new Intl.NumberFormat('en-US').format(user.balance)} üíµ‚ùóÔ∏è`,
            { reply_to_message_id: msg.message_id }
          );
        }
      } catch (error) {
        console.log(`[${Date()}] ${error}`);
      }
    }, 5000);
  } catch (error) {
    console.log(`[${Date()}] ${error}`);
  }
}

export default dice;
