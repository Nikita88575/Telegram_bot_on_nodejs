import bot from '../app.js';
import { selectTeamUser, countTeammates } from '../db/team_commands.js';

async function invite_to_team(msg) {
  try {
    const thisBot = await bot.getMe();
    if (msg.text == `/invite` || msg.text == `/invite${thisBot.username}`) {
      
      const user = await selectTeamUser(msg.from.id);

      if (msg.reply_to_message && !msg.reply_to_message.from.is_bot 
          && msg.reply_to_message.from.id != msg.from.id) {

        const invited_user = await selectTeamUser(msg.reply_to_message.from.id);
    
        if (!user) {
          await bot.sendMessage(msg.chat.id, '–£ –≤–∞—Å –Ω–µ–º–∞—î –∫–æ–º–∞–Ω–¥–∏‚ùóÔ∏è',
          { reply_to_message_id: msg.message_id });

        } else {
          if (user.role == 'owner') {

            if (invited_user) {
              await bot.sendMessage(msg.chat.id, '–¶–µ–π –∫–æ—Ä–∏—Å—Ç—É–≤–∞—á —É–∂–µ –≤ –∫–æ–º–∞–Ω–¥—ñ‚ùóÔ∏è',
              { reply_to_message_id: msg.message_id });

            } else {
              const options = {
                inline_keyboard: [
                  [{ text: '–ü—Ä–∏–π–Ω—è—Ç–∏',
                  callback_data: `accept_invite#${msg.reply_to_message.from.id}#${user.team_id}`},
  
                  { text: '–í—ñ–¥—Ö–∏–ª–∏—Ç–∏',
                  callback_data: `decline_invite#${msg.reply_to_message.from.id}`}],
                ],
              };
              
              const teammates_count = await countTeammates(user.team_id);
              const message = await bot.sendMessage(msg.chat.id,
              `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.first_name} –∑–∞–ø—Ä–æ—Å–∏–≤(–ª–∞) —Ç–µ–±–µ –¥–æ —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏ ` + 
              `<b>${user.team_name}</b>‚ùóÔ∏è\n–£—á–∞—Å–Ω–∏–∫—ñ–≤ –≤ –∫–æ–º–∞–Ω–¥—ñ: ${teammates_count}üë•‚ùóÔ∏è`,
              { reply_to_message_id: msg.reply_to_message.message_id,
                reply_markup: options, parse_mode: 'HTML' });

              setTimeout(async () => {
                await bot.deleteMessage(msg.chat.id, message.message_id);
              }, 60000 );
            }
          } else {
            await bot.sendMessage(msg.chat.id, '–¢—ñ–ª—å–∫–∏ –≤–ª–∞—Å–Ω–∏–∫ –∫–æ–º–∞–Ω–¥–∏ –º–æ–∂–µ –∑–∞–ø—Ä–æ—à—É–≤–∞—Ç–∏ –ª—é–¥–µ–π‚ùóÔ∏è',
            { reply_to_message_id: msg.message_id });
          }
        }
      } else {

        const options = {
          inline_keyboard: [
            [{ text: '–ü—Ä–∏–π–Ω—è—Ç–∏', callback_data: `join_team#${user.team_id}`}],
          ],
        };

        const teammates_count = await countTeammates(user.team_id);
        const message = await bot.sendMessage(msg.chat.id,
        `–ö–æ—Ä–∏—Å—Ç—É–≤–∞—á ${user.first_name} –∑–∞–ø—Ä–æ—à—É—î –¥–æ —Å–≤–æ—î—ó –∫–æ–º–∞–Ω–¥–∏ <b>${user.team_name}</b>‚ùóÔ∏è\n` +
        `–£—á–∞—Å—Ç–Ω–∏–∫—ñ–≤ –≤ –∫–æ–º–∞–Ω–¥—ñ: ${teammates_count}üë•‚ùóÔ∏è`, { reply_markup: options, parse_mode: 'HTML' });

        setTimeout(async () => {
          await bot.deleteMessage(msg.chat.id, message.message_id);
        }, 60000 );
      }
    } 
  } catch (error) {
    console.log(`[${Date()}] ${error}`);
  }
}

export default invite_to_team;