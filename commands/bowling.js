import bot from '../app.js';
import { selectUser, checkUser } from '../db/quick_commands.js';
import { addBowlingRecord } from '../db/history_bowling_commands.js';
import { addGameQueue } from '../db/game_queue_commands.js';
import gameQueue from '../db/models/game_queue.js';

async function bowling(msg) {
  const added = await addGameQueue(msg.from.id, 'bowling');
  if (!added) {
    return bot.sendMessage(
      msg.from.id,
      '–í–∏ –≤–∂–µ –≥—Ä–∞—î—Ç–µ. –î–æ—á–µ–∫–∞–π—Ç–µ—Å—å –∑–∞–≤–µ—Ä—à–µ–Ω–Ω—è –ø–æ–ø–µ—Ä–µ–¥–Ω—å–æ—ó –≥—Ä–∏ ‚ùóÔ∏è',
      {
        reply_to_message_id: msg.message_id,
      }
    );
  }

  try {
    await checkUser(msg, new Date());
    const user = await selectUser(msg.from.id);

    const bet = parseFloat(msg.text.split(' ').slice(1).join(''));

    if (isNaN(bet) || bet <= 0) {
      await gameQueue.destroy({
        where: { user_id: msg.from.id, game_type: 'bowling' },
      });
      return await bot.sendMessage(
        msg.chat.id,
        '–ù–µ–ø—Ä–∞–≤–∏–ª—å–Ω–∏–π —Ñ–æ—Ä–º–∞—Ç —Å—Ç–∞–≤–∫–∏‚ùóÔ∏è\n–í–∏–∫–æ—Ä–∏—Å—Ç–æ–≤—É–π—Ç–µ: /bowling <—Å—Ç–∞–≤–∫–∞>',
        { reply_to_message_id: msg.message_id }
      );
    } else if (user.balance < bet) {
      await gameQueue.destroy({
        where: { user_id: msg.from.id, game_type: 'bowling' },
      });
      return await bot.sendMessage(
        msg.chat.id,
        `–£ –≤–∞—Å –Ω–µ–¥–æ—Å—Ç–∞—Ç–Ω—å–æ –∫–æ—à—Ç—ñ–≤ –¥–ª—è —Ü—ñ—î—ó —Å—Ç–∞–≤–∫–∏‚ùóÔ∏è\n–í–∞—à –±–∞–ª–∞–Ω—Å: ${new Intl.NumberFormat('en-US').format(user.balance)}üíµ‚ùóÔ∏è`,
        { reply_to_message_id: msg.message_id }
      );
    }

    const bowlingDice = await bot.sendDice(msg.chat.id, { emoji: 'üé≥' });
    const diceValue = bowlingDice.dice.value;
    const x =
      diceValue <= 2
        ? 0
        : diceValue === 3
          ? 1
          : diceValue === 4
            ? 1.4
            : diceValue === 5
              ? 1.8
              : diceValue === 6
                ? 2
                : null;
    const now = new Date();
    let bowlingResult, winDetails;
    await user.update({
      balance: (parseFloat(user.balance) - parseFloat(bet)).toFixed(2),
    });

    setTimeout(async () => {
      try {
        const amount = (parseFloat(user.balance) + parseFloat(bet * x)).toFixed(
          2
        );
        await user.update({ balance: amount });
        winDetails = `–í–∏ –≤–∏–≥—Ä–∞–ª–∏: ${new Intl.NumberFormat('en-US').format(bet * x)} üíµ‚ùóÔ∏è\n`;
        bowlingResult = `–ó–±–∏—Ç–æ –∫–µ–≥–µ–ª—å: ${diceValue} üé≥‚ùóÔ∏è\n`;

        if (diceValue === 6) {
          bowlingResult = `Strike üé≥‚ùóÔ∏è\n`;
        } else if (diceValue == 3) {
          winDetails = `–ü–æ–≤–µ—Ä–Ω–µ–Ω–Ω—è —Å—Ç–∞–≤–∫–∏ üò¢\n`;
        } else if (diceValue <= 2) {
          bowlingResult = `–ú–∞–π–∂–µ... üò¢\n`;
          winDetails = `–í–∏ –ø—Ä–æ–≥—Ä–∞–ª–∏ üò≠\n`;
        }

        await addBowlingRecord(
          msg.from.id,
          bet,
          bowlingResult,
          diceValue,
          x,
          (bet * x).toFixed(2),
          now
        );
        await bot.sendMessage(
          msg.chat.id,
          bowlingResult +
            `C—Ç–∞–≤–∫–∞: ${new Intl.NumberFormat('en-US').format(bet)} üíµ‚ùóÔ∏è\n` +
            winDetails +
            `–í–∞—à –±–∞–ª–∞–Ω—Å: ${new Intl.NumberFormat('en-US').format(user.balance)} üíµ‚ùóÔ∏è`,
          { reply_to_message_id: msg.message_id }
        );
        await gameQueue.destroy({
          where: { user_id: msg.from.id, game_type: 'bowling' },
        });
      } catch (error) {
        console.log(`[${Date()}] ${error}`);
      }
    }, 5000);
  } catch (error) {
    console.log(`[${Date()}] ${error}`);
  }
}

export default bowling;
